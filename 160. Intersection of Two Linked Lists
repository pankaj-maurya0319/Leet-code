/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode tempA = headA;
        ListNode tempB = headB;
        
        // bruteforce is take two loops and compare.
        
        
        // approach 1 Time O(n) and sapace complexity is O(n)
        
//         HashMap< ListNode, Integer> map = new HashMap<>();
        
//         while(tempA!=null){
            
//             map.put(tempA, 1);
//             tempA = tempA.next;
            
//         }
        
//         while(tempB !=null){
            
//             if(map.containsKey(tempB)){
//                 return tempB;
//             }
//             tempB = tempB.next;
//         }
        
        // 2nd optimal approach
        
//         int length1 = 0;
//         int length2 = 0;
        
//         while(tempA != null){
//             tempA = tempA.next;
//             length1++;
//         }
        
//         while(tempB != null){
//             tempB = tempB.next;
//             length2++;
//         }
        
//         tempA = headA;
//         tempB = headB;
//         // now we will make sure that both linked list of same length
        
//         if(length1 > length2){
            
//             int i = length1-length2;
//             while(i>0 && tempA != null){
//                 tempA = tempA.next;
//                 i--;
//             }
//         }else{
            
//             int j = length2-length1;
//             while(j>0 && tempB != null){
//                 tempB = tempB.next;
//                 j--;
//             }
//         }
        
//         while(tempA != null && tempB!=null){
            
//             if(tempA == tempB){
//                 return tempA;
//             }
//             tempA = tempA.next;
//             tempB = tempB.next;
//         }
                //return null;
        
        // 3rd approach best solution
        
        if(tempA == null || tempB == null) return null;
        
        // tempA and tempB have different length then we will stop the loop after second iteration
        
        while( tempA != tempB){
        // for the end of first iteration we just reset the pointer to the head of another linked list
            tempA = tempA==null ? headB : tempA.next;
            tempB = tempB==null ? headA : tempB.next;
        }
        
        return tempA;
    }
}
